#!/bin/bash

log_path="/var/log/kushidou-touchscreen/touchscreen.log"
screenmap_path="/opt/kushidou-touchscreen/config"
screenmap_tmp_path="/opt/kushidou-touchscreen/config.tmp"
screen_tmp_path="/opt/kushidou-touchscreen/screentmp"

T0="zenity --info --title=TouchScreenSetup"
T1="--text=Please_Select_Screen-name"
T2="--ok-label=Exit"
T3="--extra-button="
T4="--ok-label=Back"
T5="--text=Please_Select_Input_Device"
log_noscreen="No_screen_detected"
log_noinput="No_touch_device_detected"
log_start="Start setup map"
log_finish="Setup finished."
log_exit="Exit without Saving"

MYLANG=$(locale | grep LANGUAGE | cut -d '=' -f 2 | cut -d '_' -f 1)
if [ "$MYLANG" == "zh" ] ; then
    T0="zenity --info --title=屏幕触摸设置"
	T1="--text=请选择要设置的屏幕"
	T2="--ok-label=退出"
	T3="--extra-button="
	T4="--ok-label=返回"
	T5="--text=请选择与该屏对应的触摸设备"
	log_noscreen="没有识别到屏幕"
	log_noinput="没有识别到设备"
	log_start="开始设置触摸屏"
	log_finish="设置完成"
	log_exit="退出未保存"
fi


# 设置完立即重映射
update_xinputmapout()
{
	while read LINE
    do
		# vid pid path name screen
        tmp1=`echo $LINE | cut -d ' ' -f 1`
        tmp2=`echo $LINE | cut -d ' ' -f 2`
		tmp3=`echo $LINE | cut -d ' ' -f 3`
		tmp4=`echo $LINE | cut -d ' ' -f 4`
		tmp5=`echo $LINE | cut -d ' ' -f 5`

		touchdev_id_change=0
		for touch_id in $(xinput | grep -i -E 'touch|ILITEK' | cut -d '=' -f 2 | cut -f 1)
		do
			input_dev=$(xinput list-props $touch_id | grep "Device Node" | awk -F : '{print $2}' | awk -F \" '{print $2}' | awk '{print $1}')
        	touch_screen=$(udevadm info $input_dev | grep "ID_INPUT_TOUCHSCREEN")

            dev=$(udevadm info $input_dev | grep "ID_SERIAL=" | cut -d "=" -f 2)
			vid_t=$(udevadm info $input_dev | grep "ID_VENDOR_ID=" | cut -d "=" -f 2)
			pid_t=$(udevadm info $input_dev | grep "ID_MODEL_ID=" | cut -d "=" -f 2)
			path_t=$(udevadm info $input_dev | grep "ID_PATH=" | cut -d "=" -f 2)
			if [ "$tmp1" == "$vid_t" ] && [ "$tmp2" == "$pid_t" ] && [ "$tmp3" == "$path_t" ] && [ "$tmp4" == "$dev" ];then
				touchdev_id_change=$touch_id
				xinput map-to-output $touchdev_id_change $tmp5
			fi
	    done

    done < $screenmap_tmp_path
}


# 更新设备映射信息，在原有“名称”的基础上增加vid:pid识别
# 格式：vid pid path name screen
update_screenmap()
{
	# 提取名称
    touch_id_end=$(echo $select_touchdev | cut -d "(" -f 2 |  cut -d "=" -f 2 | cut -d ')' -f 1)
	select_touchdev=$(echo $select_touchdev | cut -d "(" -f 1)
	# 提取VID
	input_dev=$(xinput list-props $touch_id_end | grep "Device Node" | awk -F : '{print $2}' | awk -F \" '{print $2}' | awk '{print $1}')
	vid_touch=$(udevadm info $input_dev | grep "ID_VENDOR_ID=" | cut -d "=" -f 2)
	# 提取PID
	pid_touch=$(udevadm info $input_dev | grep "ID_MODEL_ID=" | cut -d "=" -f 2)
	# 提取ID_PATH物理路径
	path_touch=$(udevadm info $input_dev | grep "ID_PATH=" | cut -d "=" -f 2)
	# 写入配置

	echo "$vid_touch $pid_touch $path_touch $select_touchdev $select_screen" >> $screenmap_tmp_path
    echo $update_count': '$vid_touch' '$pid_touch' '$path_touch' '$select_touchdev'   -->   '$select_screen >> $log_path
	update_xinputmapout
	let update_count++
}


select_touchdevice()
{
	touchdev_count=0
	# 计算触摸屏总数
	for touch_id in $(xinput | grep -i -E 'touch|ILITEK|Touch|eGalax|Weida|Goodix' | cut -d '=' -f 2 | cut -f 1)
	do
		input_dev=$(xinput list-props $touch_id | grep "Device Node" | awk -F : '{print $2}' | awk -F \" '{print $2}' | awk '{print $1}')
		touch_screen=$(udevadm info $input_dev | grep "ID_INPUT_TOUCHSCREEN")
			let touchdev_count++
	done

	# 没有触摸屏则退出
	if [ $touchdev_count == 0 ];then
		select_screen=`$T0 --text=$log_noinput $T2`
		echo "NO TOUCH DEVICE!" >> $log_path
		exit 0
	fi

	TOUCHCOM="$T0 $T5"
	# 逐项添加选项
	for touch_id in $(xinput | grep -i -E 'touch|ILITEK' | cut -d '=' -f 2 | cut -f 1)
    do
		input_dev=$(xinput list-props $touch_id | grep "Device Node" | awk -F : '{print $2}' | awk -F \" '{print $2}' | awk '{print $1}')
		touch_screen=$(udevadm info $input_dev | grep "ID_INPUT_TOUCHSCREEN")
		dev=$(udevadm info $input_dev | grep "ID_SERIAL=" | cut -d "=" -f 2)"(id="$touch_id")"

		TOUCHCOM="$TOUCHCOM $T3$dev"
  	done
	TOUCHCOM="$TOUCHCOM $T4"
	# 调用对话框选择触摸设备
	select_touchdev=`$TOUCHCOM`
    echo selected:$select_touchdev

    if [ "$select_touchdev" = "" ];then
       	#break
		echo "return"
   	else
       	update_screenmap
   	fi
}


init_screenmap()
{
	# 初始化时添加新的屏幕
	# "检查日志文件，~~删除配置文件内容~~创建临时配置文件用于保存，准备屏幕列表"
	touch $log_path
    #rm $screenmap_path >> /dev/null 2>&1
	touch $screenmap_tmp_path >> /dev/null 2>&1
	rm $screen_tmp_path >> /dev/null 2>&1
	# 获得屏幕列表
	for screen_connect in $(xrandr | grep " connected" | cut -d ' ' -f 1)
	do
        echo $screen_connect >> $screen_tmp_path
	done
}


echo -e "$(date)\t$log_start" >> $log_path
init_screenmap
update_count=1
while [ 1 ]
do
	# 计算屏幕总数=配置文件行数
	screen_count=$(cat $screen_tmp_path | wc -l)

	# 如果没有屏则退出
	if [ $screen_count == 0 ];then
		select_screen=`$T0 --text=$log_noscreen`
		echo "NO SCREENS!" >> $log_path
		echo " " >> $log_path
		exit 0
	fi

	SELECTCOM="$T0 $T1 "
	while read LINE
	do
		SELECTCOM="$SELECTCOM $T3$LINE"
	done < $screen_tmp_path

	[[ $(cat $screenmap_tmp_path) = "" ]] && SELECTCOM="$SELECTCOM ${T3}Save $T2"
	[[ ! $(cat $screenmap_tmp_path) = "" ]] && SELECTCOM="$SELECTCOM $T2"
	select_screen=`$SELECTCOM`
    echo selected:$select_screen

	if [ "$select_screen" = "" ];then
		echo -e "$(date)\t$log_exit" >> $log_path
		echo "=====================END======================" >> $log_path
		echo " " >> $log_path
		rm $screen_tmp_path
		rm $screenmap_tmp_path
		break
	elif [ "$select_screen" = "Save" ];then
		cp $screenmap_tmp_path $screenmap_path >> /dev/null 2>&1
		rm $screenmap_tmp_path >> /dev/null 2>&1
		echo -e "$(date)\t$log_finish" >> $log_path
		echo "=====================END======================" >> $log_path
		echo " " >> $log_path
		rm $screen_tmp_path
		break
	else
		select_touchdevice
	fi
done
exit 0
